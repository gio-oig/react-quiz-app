{"version":3,"sources":["components/CuestionCard.jsx","API.js","utils.js","components/Button.jsx","App.js","index.js"],"names":["CuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","map","answer","key","disabled","value","onClick","fetchQuizeQuestions","difficulty","type","a","endPoint","fetch","response","json","responseData","results","array","incorrect_answers","correct_answer","sort","Math","random","Button","text","invert","style","background","color","App","useForm","register","handleSubmit","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","dif","newQuestions","console","log","id","onSubmit","data","htmlFor","name","ref","required","e","currentTarget","correct","prevScore","answerObject","correctAnswer","prev","undefined","length","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50adf5c2.chunk.js","sourcesContent":["import React from 'react';\nimport { AnswersObject } from '../App';\n\nconst CuestionCard = ({\n\tquestion,\n\tanswers,\n\tcallback,\n\tuserAnswer,\n\tquestionNr,\n\ttotalQuestions,\n}) => {\n\treturn (\n\t\t<div>\n\t\t\t<p className=\"number\">\n\t\t\t\t{questionNr} / {totalQuestions}\n\t\t\t</p>\n\t\t\t<p>question </p>\n\t\t\t<div>\n\t\t\t\t{answers.map((answer) => (\n\t\t\t\t\t<div key={answer}>\n\t\t\t\t\t\t<button disabled={!!userAnswer} value={answer} onClick={callback}>\n\t\t\t\t\t\t\t<span>{answer}</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default CuestionCard;\n","import { shuffleArray } from './utils';\n\nexport const fetchQuizeQuestions = async (difficulty, type) => {\n\tconst endPoint = `https://opentdb.com/api.php?amount=10&difficulty=${difficulty}&type=${\n\t\ttype === 'any' ? '' : type\n\t}`;\n\tconst response = await fetch(endPoint);\n\tconst responseData = await response.json();\n\n\treturn responseData.results.map((question) => ({\n\t\t...question,\n\t\tanswers: shuffleArray([\n\t\t\t...question.incorrect_answers,\n\t\t\tquestion.correct_answer,\n\t\t]),\n\t}));\n};\n","export const shuffleArray = (array) => array.sort(() => Math.random() - 0.5);\n","import React from 'react';\n\nimport './Button.style.css';\nfunction Button({ text, invert }) {\n\treturn (\n\t\t<div className=\"btn-wrapper\">\n\t\t\t<button\n\t\t\t\tstyle={{\n\t\t\t\t\tbackground: invert ? '#fff' : '#005375',\n\t\t\t\t\tcolor: invert ? '#005375' : '#fff',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{text}\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default Button;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport CuestionCard from './components/CuestionCard';\n// types\n// import { QuestionState, Difficulty } from './API';\nimport { QuestionState } from './API';\nimport { fetchQuizeQuestions } from './API';\n\nimport Button from './components/Button';\n\nimport './App.css';\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n\tconst { register, handleSubmit } = useForm();\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\tconst startTrivia = async (dif, type) => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\n\t\tconst newQuestions = await fetchQuizeQuestions(dif, type);\n\n\t\tsetQuestions(newQuestions);\n\t\tsetScore(0);\n\t\tsetUserAnswers([]);\n\t\tsetNumber(0);\n\t\tsetLoading(false);\n\t\tconsole.log(newQuestions);\n\t};\n\n\tconst checkAnswer = (e) => {\n\t\tif (!gameOver) {\n\t\t\tconst answer = e.currentTarget.value;\n\n\t\t\tconst correct = questions[number].correct_answer === answer;\n\t\t\tconsole.log(answer);\n\t\t\tif (correct) setScore((prevScore) => prevScore + 1);\n\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer,\n\t\t\t};\n\n\t\t\tsetUserAnswers((prev) => [...prev, answerObject]);\n\t\t}\n\t};\n\n\tconst nextQuestion = () => {\n\t\tconst nextQuestion = number + 1;\n\n\t\tnextQuestion === TOTAL_QUESTIONS\n\t\t\t? setGameOver(true)\n\t\t\t: setNumber(nextQuestion);\n\t};\n\n\tconst onSubmit = (data) => {\n\t\tconst { difficulty, type } = data;\n\t\tstartTrivia(difficulty, type);\n\t\t// console.log(a);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<section id=\"main\">\n\t\t\t\t{gameOver && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h1 className=\"heading\">QUIZIZ</h1>\n\t\t\t\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t\t\t\t<div className=\"form-control\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"difficulty\">Select Difficulty:</label>\n\t\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\t\tname=\"difficulty\"\n\t\t\t\t\t\t\t\t\tid=\"difficulty\"\n\t\t\t\t\t\t\t\t\tref={register({ required: true })}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<option value=\"easy\">easy</option>\n\t\t\t\t\t\t\t\t\t<option value=\"easy\">medium</option>\n\t\t\t\t\t\t\t\t\t<option value=\"easy\">hard</option>\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-control\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"type\">Select Type:</label>\n\t\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\t\tname=\"type\"\n\t\t\t\t\t\t\t\t\tid=\"type\"\n\t\t\t\t\t\t\t\t\tref={register({ required: true })}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<option value=\"any\">any</option>\n\t\t\t\t\t\t\t\t\t<option value=\"multiple\">multiple Chioce</option>\n\t\t\t\t\t\t\t\t\t<option value=\"boolean\">true / false</option>\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Button text=\"Start\" />\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{!gameOver ? <p className=\"score\">score: {score}</p> : null}\n\t\t\t\t{loading && <p>Loading Questions....</p>}\n\t\t\t\t{!loading && !gameOver ? (\n\t\t\t\t\t<CuestionCard\n\t\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\t\tquestionNr={number + 1}\n\t\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t\t{!loading &&\n\t\t\t\t!gameOver &&\n\t\t\t\tuserAnswers.length === number + 1 &&\n\t\t\t\tnumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t\t<button className=\"next\" onClick={nextQuestion}>\n\t\t\t\t\t\tNext Question\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t</section>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}